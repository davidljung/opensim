/****************************************************************************
  Copyright (C)1996 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: SOLIDCollisionDetector 1031 2004-02-11 20:46:36Z jungd $
  $Revision: 1.2 $
  $Date: 2004-02-11 15:46:36 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _PHYSICS_SOLIDCOLLISIONDETECTOR_
#define _PHYSICS_SOLIDCOLLISIONDETECTOR_

#include <physics/physics>
#include <base/array>
#include <physics/CollisionDetector>
#include <physics/SOLIDCollisionModel>


namespace physics {


class SOLIDCollisionDetector : public CollisionDetector
{
public:
  SOLIDCollisionDetector();
  virtual ~SOLIDCollisionDetector();

  virtual String className() const { return String("SOLIDCollisionDetector"); }

  virtual CollisionModel::CollisionModelType getType() const
    { return CollisionModel::SOLIDModel; }

  virtual bool collision(ref<const Solid> solid1, ref<const Solid> solid2, CollisionQueryType queryType);
  
  
  virtual bool collisionEnable(bool enabled) 
    {
      bool oldEnable = collisionDetectionEnabled;
      collisionDetectionEnabled=enabled; 
      return oldEnable;
    }
  

  
protected:
  bool collisionDetectionEnabled;
  
  virtual ref<CollisionState> newCollisionState(ref<const Solid> solid1, ref<const Solid> solid2) const;

  
  class SOLIDCollisionState : public CollisionState
  {
  public:
    SOLIDCollisionState(ref<const Solid> solid1, ref<const Solid> solid2, CollisionModel::CollisionModelType modelType);
    virtual ~SOLIDCollisionState();

    virtual String className() const { return String("SOLIDCollisionState"); }
  };
  
  
  // state recorded between call to dtTestObjects() ..->.. collisionCallback()
  //  and collision()
  bool collided;
  ref<const Solid> solid1;
  ref<const Solid> solid2;
  const DtCollData* collision_data;

  static bool SOLIDResponseFunctionRegistered;
  
public: // needed so SOLIDCollisionDetectorResponse can call it (friend doesn't seem to work)
  void collisionCallback(DtObjectRef object1, DtObjectRef object2,
			 const DtCollData* coll_data);

};


} // physics

#endif
