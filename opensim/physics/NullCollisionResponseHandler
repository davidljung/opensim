/* **-*-c++-*-**************************************************************
  Copyright (C)2003 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: NullCollisionResponseHandler 1031 2004-02-11 20:46:36Z jungd $
  $Revision: 1.1 $
  $Date: 2004-02-11 15:46:36 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _PHYSICS_NULLCOLLISIONRESPONSEHANDLER_
#define _PHYSICS_NULLCOLLISIONRESPONSEHANDLER_

#include <physics/physics>

#include <physics/CollisionResponseHandler>


namespace physics {


/// A handles collisions by doing nothing  
class NullCollisionResponseHandler : public CollisionResponseHandler
{
public:
  NullCollisionResponseHandler(ref<CollisionDetector> collisionDetector) : CollisionResponseHandler(collisionDetector) {}
  virtual ~NullCollisionResponseHandler() {}

  virtual String className() const { return String("NullCollisionResponseHandler"); }

  virtual void handleCollision(ref<CollisionState> collisionState) {}
  
  virtual void collide(ref<const Collidable> collidable1, ref<const Collidable> collidable2) {} 
  virtual void collide(ref<const CollidableGroup> group) {}

protected:
  NullCollisionResponseHandler() {}
  NullCollisionResponseHandler(const NullCollisionResponseHandler& h) : CollisionResponseHandler(h) {}
};


} // physics

#endif
