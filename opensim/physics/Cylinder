/****************************************************************************
  Copyright (C)1996 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  $Id: Cylinder 1143 2004-09-28 21:03:16Z jungd $
  $Revision: 1.7 $
  $Date: 2004-09-28 17:03:16 -0400 (Tue, 28 Sep 2004) $
  $Author: jungd $

****************************************************************************/

#ifndef _PHYSICS_CYLINDER_
#define _PHYSICS_CYLINDER_

#include <physics/physics>
#include <physics/ConvexShape>
#include <base/Dimension3>
#include <base/Point3>


namespace physics {


class Cylinder : virtual public ConvexShape
{
public:
  Cylinder();
  explicit Cylinder(Real height, Real radius=1.0);
  Cylinder(const Cylinder& c);
  virtual ~Cylinder();

  virtual String className() const { return String("Cylinder"); }

  Real height() const { return _height; }
  Real radius() const { return _radius; }

  // Shape
  virtual base::Object& clone() const { return *NewNamedObj(className()) Cylinder(*this); }

  virtual BoundingBox getBoundingBox() const {
    return BoundingBox(gfx::Point3(-_radius,-_radius,-_height/2.0),
                       gfx::Point3(_radius,_radius,_height/2.0));
  }

  virtual BoundingSphere getBoundingSphere() const
    { return BoundingSphere(gfx::Point3(),Math::maximum(_radius,_height/2.0)); }

  virtual const MassProperties& getMassProperties(ref<const Material> material) const;

  virtual gfx::Segment3 shortestSegmentBetween(const base::Transform& t, const Point3& p) const;
  virtual gfx::Segment3 shortestSegmentBetween(const base::Transform& t, const gfx::Segment3& s) const;
  virtual gfx::Segment3 shortestSegmentBetween(const base::Transform& t, const gfx::Triangle3& tri) const;
  virtual gfx::Segment3 shortestSegmentBetween(const base::Transform& t, const gfx::Quad3& q) const;
  virtual gfx::Segment3 shortestSegmentBetween(const base::Transform& t1, ref<const Shape> s, const base::Transform& t2) const;

  // ConvexShape
  virtual gfx::Point3 support(const gfx::Vector3& v) const
    { throw std::runtime_error(Exception("not implemented")); }

  // Collidable
  virtual ref<CollisionModel> getCollisionModel(CollisionModel::CollisionModelType modelType) const;

  // Visual
  virtual bool visualTypeSupported(VisualType type) const { return (type==OSGVisual); }
  virtual osg::Node* createOSGVisual(Attributes visualAttributes=0) const;

  virtual void serialize(base::Serializer& s);

  // Externalizable
  virtual bool formatSupported(String format, Real version = 1.0, ExternalizationType type = IO) const;
  virtual void externalize(base::Externalizer& e, String format = "", Real version = 1.0);
  virtual void externalize(base::Externalizer& e, String format = "", Real version = 1.0) const
    { Externalizable::externalize(e,format,version); }

protected:
  osg::Node* createOSGCylinder(Visual::Attributes visualAttributes,
                               Int slices, Int stacks) const;

private:
  Real _height;
  Real _radius;

  mutable bool massPropertiesCached;
  mutable Real density;
  mutable MassProperties massProperties;

  mutable ref<CollisionModel> collisionModel;
  mutable CollisionModel::CollisionModelType modelType;
};


} // physics

#endif
