/* **-*-c++-*-**************************************************************
  Copyright (C)2003 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: CollisionCuller 1031 2004-02-11 20:46:36Z jungd $
  $Revision: 1.1 $
  $Date: 2004-02-11 15:46:36 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _PHYSICS_COLLISIONCULLER_
#define _PHYSICS_COLLISIONCULLER_

#include <physics/physics>

#include <physics/Collider>
#include <physics/CollidableGroup>


namespace physics {

/// A Collider that filters out pairs of Collidables that cannot possibly collide
class CollisionCuller : public Collider
{
public:
  virtual ~CollisionCuller() {}

  virtual void collisionEnable(bool enabled, ref<const Collidable> collidable1, ref<const Collidable> collidable2) 
  {
    if (&(*collidable1) > &(*collidable2))
      base::swap(collidable1,collidable2);
    
    CollidablePair collidablePair = std::make_pair(collidable1, collidable2);
    collisionDisabledMap[collidablePair] = enabled;
  }
  
  virtual bool isCollisionEnabled(ref<const Collidable> collidable1, ref<const Collidable> collidable2)
  {
    if (&(*collidable1) > &(*collidable2))
      base::swap(collidable1,collidable2);
    
    CollidablePair collidablePair = std::make_pair(collidable1, collidable2);
    
    // is there an entry for this pair?
    CollisionDisabledMap::iterator entry = collisionDisabledMap.find(collidablePair);
    if (entry != collisionDisabledMap.end()) {
      // yes, use it
      return entry->second;
    }
    else 
      return true; // no entry => collisions enabled

  }
  
  virtual void collisionEnable(bool enabled) { Collider::collisionEnable(enabled); }
  virtual bool isCollisionEnabled() const { return Collider::isCollisionEnabled(); }

  virtual ref<CollidableGroup> createCollidableGroup() const = 0;
  
protected:
  CollisionCuller() {}
  CollisionCuller(const CollisionCuller& cc) : Collider(cc) {}
  
  typedef std::pair< ref<const Collidable>, ref<const Collidable> > CollidablePair;
  typedef std::map< CollidablePair, bool > CollisionDisabledMap;
  
  CollisionDisabledMap collisionDisabledMap; // if key not present or false, collisions enabled
};

// needed by std::map CollisionDisabledMap
inline bool operator<(ref<const Collidable> c1, const Collidable* c2)
{ return &(*c1) < c2; }


} // physics

#endif
