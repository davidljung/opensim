/* **-*-c++-*-**************************************************************
  Copyright (C)1996 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: Body 1031 2004-02-11 20:46:36Z jungd $
  $Revision: 1.7 $
  $Date: 2004-02-11 15:46:36 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _PHYSICS_BODY_
#define _PHYSICS_BODY_

#include <physics/physics>

#include <physics/DynamicSpatial>
#include <physics/MassProperties>
#include <physics/Shape>


namespace physics {


class Body : public DynamicSpatial
{
public:
  virtual ~Body() {}

  virtual String className() const { return String("Body"); }

  virtual ref<const Shape> getShape() const { return shape; }


protected:
  Body() {}
  Body(ref<const Shape> shape) : shape(shape) { Assert(shape); }
  Body(const Body& b) : DynamicSpatial(b), shape(b.shape) {}

  virtual Body& operator=(const Body& b) { DynamicSpatial::operator=(b); shape = b.shape; return *this; }
  
  void setShape(ref<Shape> shape) { this->shape = shape; }

private:
  ref<const Shape> shape;  ///< shape of the Body
};
  
  
inline std::ostream& operator<<(std::ostream& out, const Body& b) // Output
{
  return out << "(x:" << b.getPosition() << ",q:" << b.getOrientation() 
	     << ",v:" << b.getVelocity() << ",w:" << b.getAngVelocity() << ")"; 
}
  

} // physics

#endif
