/****************************************************************************
  Copyright (C)1996 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: SimpleTerrain 1031 2004-02-11 20:46:36Z jungd $
  $Revision: 1.2 $
  $Date: 2004-02-11 15:46:36 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
  
****************************************************************************/

#ifndef _PHYSICS_SIMPLETERRAIN_
#define _PHYSICS_SIMPLETERRAIN_

#include <physics/physics>
#include <physics/Terrain>
#include <physics/OSGVisual>
#include <osg/GeoSet>


namespace physics {


class SimpleTerrain : virtual public Terrain
{
public:
  SimpleTerrain(HeightField& heightfield);
  SimpleTerrain(const SimpleTerrain& t);
  virtual ~SimpleTerrain();

  virtual String className() const { return String("SimpleTerrain"); }

  // Terrain
  virtual Real& height(Real x, Real y)             throw(std::out_of_range);
  virtual const Real& height(Real x, Real y) const throw(std::out_of_range);

  // Shape
  virtual base::Object& clone() const { return *NewNamedObj(className()) SimpleTerrain(*this); }
  virtual BoundingBox    getBoundingBox() const;
  virtual BoundingSphere getBoundingSphere() const;
  virtual const MassProperties& getMassProperties(const Material& material) const;

  // Tesselatable
  virtual const gfx::Tesselation& getTesselation(Int properties=VertexNormals) const;

  // CollisionModelProvider
  virtual CollisionModel& getCollisionModel(CollisionModel::CollisionModelType modelType) const;
   
protected:
  virtual osg::GeoSet& getGeoSet(Int properties=VertexNormals) const;

private:
  mutable bool massPropertiesCached;
  mutable MassProperties massProperties;

  mutable gfx::Tesselation* tesselation;
  mutable Int properties;
  mutable bool tesselated;

  mutable osg::ref_ptr<osg::GeoSet> geoSet;
  mutable bool geoSetCached;

  mutable bool collisionModelCached;
  mutable CollisionModel* collisionModel;
  mutable CollisionModel::CollisionModelType modelType;
};


} // physics

#endif
