/* **-*-c++-*-**************************************************************
  Copyright (C)1996 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  $Id: Box 1031 2004-02-11 20:46:36Z jungd $
  $Revision: 1.6 $
  $Date: 2004-02-11 15:46:36 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $

****************************************************************************/

#ifndef _PHYSICS_COMPOSITESHAPE_
#define _PHYSICS_COMPOSITESHAPE_

#include <list>

#include <base/reflist>

#include <base/Dimension3>
#include <base/Transform>
#include <base/Serializable>
#include <gfx/Segment3>
#include <gfx/Triangle3>
#include <gfx/Quad3>

#include <physics/physics>
#include <physics/ComplexShape>

#include <gfx/Visual>


namespace physics {


class CompositeShape : virtual public ComplexShape
{
public:
  CompositeShape(const base::reflist<Shape>& shapes, const std::list<base::Transform>& transforms);
  CompositeShape(const CompositeShape& c);
  virtual ~CompositeShape();

  virtual String className() const { return String("CompositeShape"); }
  virtual base::Object& clone() const { return *NewNamedObj(className()) CompositeShape(*this); }


  // Shape
  virtual BoundingBox    getBoundingBox() const;
  virtual BoundingSphere getBoundingSphere() const;
  virtual const MassProperties& getMassProperties(ref<const Material> material) const;

  virtual gfx::Segment3 shortestSegmentBetween(const base::Transform& t, const Point3& p) const;
  virtual gfx::Segment3 shortestSegmentBetween(const base::Transform& t, const gfx::Segment3& s) const;
  virtual gfx::Segment3 shortestSegmentBetween(const base::Transform& t, const gfx::Triangle3& tri) const;
  virtual gfx::Segment3 shortestSegmentBetween(const base::Transform& t, const gfx::Quad3& q) const;
  virtual gfx::Segment3 shortestSegmentBetween(const base::Transform& t1, ref<const Shape> s, const base::Transform& t2) const;

  // CollisionModelProvider
  virtual ref<CollisionModel> getCollisionModel(CollisionModel::CollisionModelType modelType) const;

  // Visual
  virtual bool visualTypeSupported(VisualType type) const { return (type==OSGVisual); }
  virtual osg::Node* createOSGVisual(Attributes visualAttributes=0) const;

  virtual void serialize(base::Serializer& s);

  // Externalizable
  virtual bool formatSupported(String format, Real version = 1.0, ExternalizationType type = IO) const;
  virtual void externalize(base::Externalizer& e, String format = "", Real version = 1.0);
  virtual void externalize(base::Externalizer& e, String format = "", Real version = 1.0) const
    { Externalizable::externalize(e,format,version); }

protected:

private:
  array<ref<Shape> >     shapes;
  array<base::Transform> transforms;

  mutable bool massPropertiesCached;
  mutable Real density;
  mutable MassProperties massProperties;

  mutable ref<CollisionModel> collisionModel;
  mutable CollisionModel::CollisionModelType modelType;
};


} // physics

#endif
