/****************************************************************************
  Copyright (C)1996 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: ODEUniversalJoint 1031 2004-02-11 20:46:36Z jungd $
  $Revision: 1.2 $
  $Date: 2004-02-11 15:46:36 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _PHYSICS_ODEUNIVERSALJOINT_
#define _PHYSICS_ODEUNIVERSALJOINT_

#include <physics/physics>
#include <physics/UniversalJoint>
#include <physics/ODEJoint>


namespace physics {


class ODEUniversalJoint : public UniversalJoint, public ODEJoint
{
public:
  ODEUniversalJoint();
  virtual ~ODEUniversalJoint();

  virtual String className() const { return String("ODEUniversalJoint"); }
  virtual Object& clone() const { return *NewNamedObj(className()) ODEUniversalJoint(); }

  virtual void    setAnchor(const Point3& p); ///< body1 relative
  virtual Point3  getAnchor() const;

  virtual void    setAxis1(const Vector3& v); ///< body1 relative
  virtual Vector3 getAxis1() const;
  
  virtual void    setAxis2(const Vector3& v); ///< body1 relative
  virtual Vector3 getAxis2() const;

protected:
  virtual void onConstraintGroupAdd(ref<ConstraintGroup> g); ///< called by ConstraintGroup::addConstraint()

  virtual bool hasMotor(Int dof) const; ///< implemented by concrete ODEJoint classes to indicate which DOF's can have a Motor attached
  virtual void setMotorTargetVel(Int dof, Real vel); ///< implemented by concrete ODEJoint classes
  virtual void setMotorMaxForce(Int dof, Real force);///< implemented by concrete ODEJoint classes
};


} // physics

#endif
