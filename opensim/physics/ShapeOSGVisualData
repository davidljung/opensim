/* **-*-c++-*-**************************************************************
  Copyright (C)1996 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  $Id: Shape 1031 2004-02-11 20:46:36Z jungd $
  $Revision: 1.7 $
  $Date: 2004-02-11 15:46:36 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $

****************************************************************************/

#ifndef _PHYSICS_SHAPEOSGVISUALDATA_
#define _PHYSICS_SHAPEOSGVISUALDATA_

#include <physics/physics>
#include <gfx/Visual>

#include <osg/Shape>


namespace physics {

/// mixin to store common data for Shape implementations that provide OSG Visuals
class ShapeOSGVisualData
{
public:
  ShapeOSGVisualData()
    { clearVisualCache(); }

  virtual ~ShapeOSGVisualData() {}

protected:
  ShapeOSGVisualData(const ShapeOSGVisualData& s)
    { clearVisualCache(); }

  void clearVisualCache() { node=0; shape=0; }

  bool isOSGVisualCached(gfx::Visual::Attributes visualAttributes) const
    { return (node!=0) && (attributes==visualAttributes); }

  mutable gfx::Visual::Attributes attributes; ///< attributed of last Visual returned (& cached)
  mutable ref_ptr<osg::Node> node;   ///< cached visual - typically a Geode containing a ShapeDrawable for shape
  mutable ref_ptr<osg::Shape> shape; ///< cached visual shape to draw (0 if Shape isn't represented by an osg::Shape)

};


} // physics

#endif
