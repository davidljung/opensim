/****************************************************************************
  Copyright (C)1996 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: CollisionModel 1031 2004-02-11 20:46:36Z jungd $
  $Revision: 1.4 $
  $Date: 2004-02-11 15:46:36 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _PHYSICS_COLLISIONMODEL_
#define _PHYSICS_COLLISIONMODEL_

#include <physics/physics>
#include <base/ReferencedObject>
#include <gfx/Visual>


namespace physics {

/// deprecated.
class CollisionModel : public gfx::Visual,
		       public base::ReferencedObject
{
public:
  virtual ~CollisionModel() {}

  enum CollisionModelType { AnyModel, OBBModel, SOLIDModel, GJKModel, ODEModel,
			    MaxCollisionModels };

  virtual CollisionModelType getType() const = 0;


  enum CollisionModelFidelity { Accurate, Normal, Fast, Fastest };

  static void setCollisionModelFidelity(CollisionModelFidelity fidelity)
    { collisionModelFidelity = fidelity; }
  static CollisionModelFidelity getCollisionModelFidelity()
    { return collisionModelFidelity; }


  class ModelState : public base::ReferencedObject
  {
  public:
    ModelState() {}
    virtual ~ModelState() {}

    virtual String className() const { return String("CollisionModel::ModelState"); }
    virtual base::Object& clone() const { return *NewNamedObj(className()) ModelState(); }
    
  };


protected:
  static CollisionModelFidelity collisionModelFidelity;
};


} // physics

#endif
