/****************************************************************************
  Copyright (C)1996 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
	
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  $Id: ReferencedObject 1029 2004-02-11 20:45:54Z jungd $
  $Revision: 1.6 $
  $Date: 2004-02-11 15:45:54 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _BASE_REFERENCEDOBJECT_
#define _BASE_REFERENCEDOBJECT_

#include <base/Object>
#include <base/Referenced>

namespace base {


/** Base class/standard interface for objects which require
    reference counting.
*/

#ifdef DEBUG
//#define DEBUG_REFS
#endif

class ReferencedObject : virtual public Object, virtual public Referenced
{
public:
  ReferencedObject() 
  {
#ifdef DEBUG_REFS
    Debugln("Constructing " << this->className() << " (" << (void*)(this) << ")");
#endif
  }
  
  virtual bool isSameKindAs(const ReferencedObject&) const { return true; }

#ifdef DEBUG_REFS
  inline void unreference() const 
  { 
    --_refCount;
    if (_refCount<=0) { 
      Debugln("Deleting " << this->className() << " (" << (void*)(this) << ")");
    }
  }
#endif  

  virtual ~ReferencedObject() {}

private:
  
  /** disallow any form of deep copy.*/
  ReferencedObject(const ReferencedObject&): Referenced() {}
  ReferencedObject& operator=(const ReferencedObject&) { return *this; }
};


} // base

#endif
