/* **-*-c++-*-**************************************************************
  Copyright (C)2002 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: SinExpression 1029 2004-02-11 20:45:54Z jungd $
  $Revision: 1.15 $
  $Date: 2004-02-11 15:45:54 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _BASE_SINEXPRESSION_
#define _BASE_SINEXPRESSION_

#include <base/base>
#include <base/consts>
#include <base/UnaryOpExpression>
#include <base/ProductExpression>
#include <base/CosExpression>

namespace base {


//
// Evaluates the sin of it's argument
//

class SinExpression : public UnaryOpExpression 
{
public:
  SinExpression(ref<ExpressionNode> arg)
    : UnaryOpExpression(arg) {}
  SinExpression(const SinExpression& e)
    : UnaryOpExpression(e) {}

  virtual NodeType type() const { return NodeType(UnaryOp|Sine); } 

  virtual Object& clone() const { return *NewObj SinExpression(*this); }
  virtual String className() const { return String("SinExpression"); }

  virtual String toString() const { return String("sin(")+arg->toString()+")"; }

protected:
  SinExpression() {}

  virtual void cacheValue(const Vector& params) const
    { value = base::sin( arg->evaluate(params) ); valueCached=true; }

  virtual void cacheDerivative(Int withRespectToIndex) const
    {
      derivative = ref<ExpressionNode>( NewObj ProductExpression( ref<ExpressionNode>(NewObj CosExpression(arg)),
								  arg->differentiate(withRespectToIndex)) ); 
      derivWithRespToIndex = withRespectToIndex;
      derivCached = true;
    }

  virtual void operationCounts(Int& addsub, Int& multdiv, Int& trig) const 
    { UnaryOpExpression::operationCounts(addsub,multdiv,trig); trig++; }
  
  friend class Serializable::SerializableDerivedInstantiator<SinExpression>;
};

} // base

#endif

