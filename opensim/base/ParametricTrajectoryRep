/* **-*-c++-*-**************************************************************
  Copyright (C)2002 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: ParametricTrajectoryRep 1029 2004-02-11 20:45:54Z jungd $
  $Revision: 1.1 $
  $Date: 2004-02-11 15:45:54 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _BASE_PARAMETRICTRAJECTORYREP_
#define _BASE_PARAMETRICTRAJECTORYREP_

#include <base/TrajectoryTimeRep>
#include <base/ParametricPathRep>
#include <base/Math>


namespace base {


/// Concrete trajectory representation as a set symbolic parametric equations for positions/orientation and time in terms of s in [0..1]
class ParametricTrajectoryRep : public ParametricPathRep, public TrajectoryTimeRep
{
public:
  ParametricTrajectoryRep(const ExpressionVector& p);
  
  virtual Object& clone() const
    { return *NewObj ParametricTrajectoryRep(v,times,flags); }

  virtual String className() const { return String("ParametricTrajectoryRep"); }

  /// get time at s:[0..1]
  virtual Time time(Real s) const;

  /// shift time by dt
  virtual void shiftTime(const Time& dt);

  /// scale time by s
  virtual void scaleTime(Real s);

  /// get parameter s value at time t
  virtual Real gets(const Time& t) const;

  virtual void serialize(Serializer& s);

protected:
  ParametricTrajectoryRep() {}
  ParametricTrajectoryRep(const ExpressionVector& v, const Expression& times, Int flags)
    : times(times) { this->v = v; this->flags = flags; }

  Expression times;
  inline Real eval(Real s) const { Vector param(1); param[0]=s; return times.evaluate(param); }
  
  void linearFit(Real& a, Real &b) const; ///< fits the line t = a*s + b to the expression in times

  friend class Trajectory;
  friend class Serializable::SerializableDerivedInstantiator<ParametricTrajectoryRep>;
};


} // base

#endif
