/* **-*-c++-*-**************************************************************
  Copyright (C)2002 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: ConstantExpression 1029 2004-02-11 20:45:54Z jungd $
  $Revision: 1.10 $
  $Date: 2004-02-11 15:45:54 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _BASE_CONSTANTEXPRESSION_
#define _BASE_CONSTANTEXPRESSION_

#include <base/base>
#include <base/ExpressionNode>


namespace base {


//
// Super class of all unary operator experssions
//

class ConstantExpression : public ExpressionNode
{
public:
  ConstantExpression(Real constantValue) 
    : constValue(constantValue) {}
  ConstantExpression(const ConstantExpression& e)
    : constValue(e.constValue) {}

  virtual NodeType type() const { return NodeType(Leaf|Constant); } 

  virtual Object& clone() const { return *NewObj ConstantExpression(*this); }
  virtual String className() const { return String("ConstantExpression"); }

  virtual String toString() const { return base::realToString(constValue); }

  virtual void serialize(Serializer& s) { s(constValue,"value"); }

protected:
  ConstantExpression() {}

  virtual void cacheValue(const Vector& params) const
    { value = constValue; valueCached=true; }
  virtual void resetCache() const { valueCached=false; }

  virtual void cacheDerivative(Int withRespectToIndex) const
    {
      derivative = ref<ExpressionNode>(NewObj ConstantExpression(0));
      derivWithRespToIndex = withRespectToIndex;
      derivCached = true; 
    }
  virtual void resetDerivCached() const { derivCached=false; derivative = ref<ExpressionNode>(0); }


  virtual void operationCounts(Int& addsub, Int& multdiv, Int& trig) const 
    {}

  Real constValue;

  friend class Expression;
  friend class Serializable::SerializableDerivedInstantiator<ConstantExpression>;
};

} // base

#endif

