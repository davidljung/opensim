/****************************************************************************
  Copyright (C)1996 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: StdFileSystem 1029 2004-02-11 20:45:54Z jungd $
  $Revision: 1.3 $
  $Date: 2004-02-11 15:45:54 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _BASE_STDFILESYSTEM_
#define _BASE_STDFILESYSTEM_

#include <base/base>
#include <base/VFileSystem>
#include <base/Directory>

namespace base {


class StdFileSystem : public VFileSystem
{
public:
  StdFileSystem();
  virtual ~StdFileSystem();

  virtual String className() const { return String("StdFileSystem"); }
  virtual Object& clone() const { return *NewNamedObj(className()) StdFileSystem(*this); }

  virtual ref<VDirectory> root(); ///< get the root directory of this VFileSystem (e.g. "/")
  virtual ref<VDirectory> temp(); ///< get directory in which temporary files can be stored
  virtual ref<VDirectory> current(); ///< get the current working directory
  virtual void setCurrent(const PathName& path) throw (path_not_found, io_error, std::invalid_argument); ///< set the current directory (defaults to root)

  virtual ref<VDirectory> getDirectory(const PathName& path)   throw (path_not_found, io_error, std::invalid_argument);
  virtual ref<VFile>      getFile(const PathName& path)        throw (path_not_found, io_error, std::invalid_argument);
  virtual bool            exists(const PathName& path)         throw (io_error);

protected:  
  StdFileSystem(const StdFileSystem& fs) {}

  ref<Directory> currentDir;
};

} // base

#endif
