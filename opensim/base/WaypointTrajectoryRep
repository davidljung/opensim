/* **-*-c++-*-**************************************************************
  Copyright (C)2002 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: WaypointTrajectoryRep 1029 2004-02-11 20:45:54Z jungd $
  $Revision: 1.4 $
  $Date: 2004-02-11 15:45:54 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _BASE_WAYPOINTTRAJECTORYREP_
#define _BASE_WAYPOINTTRAJECTORYREP_

#include <base/TrajectoryTimeRep>
#include <base/WaypointPathRep>
#include <base/Math>


namespace base {


/// Concrete trajectory representation as a sequence of positions and times
class WaypointTrajectoryRep : public WaypointPathRep, public TrajectoryTimeRep
{
public:
  WaypointTrajectoryRep(const array<Point3>& points, const array<Orient>& orients, const array<Time>& times)
    : WaypointPathRep(), times(times)
  {
    this->points = points;
    this->orients = orients;
    flags = None;
        
    computeSis(); 
  }

  virtual Object& clone() const
    { return *NewObj WaypointTrajectoryRep(points, orients, times, si, flags); }

  virtual String className() const { return String("WaypointTrajectoryRep"); }

  /// get time at s:[0..1]
  virtual Time time(Real s) const;

  /// shift time by dt
  virtual void shiftTime(const Time& dt);

  /// scale time by s
  virtual void scaleTime(Real s);

  /// get parameter s value at time t
  virtual Real gets(const Time& t) const;

  virtual void serialize(Serializer& s);

protected:
  WaypointTrajectoryRep() {}
  WaypointTrajectoryRep(const array<Point3>& points, const array<Orient>& orients, 
			const array<Time>& times, array<Real> si, Int flags)
    : WaypointPathRep(points,orients,si,flags), times(times) {}

  array<Time> times;

  /// compute si's s.t. s:[0..1] maps to t:[start-time..end-time]
  virtual void computeSis();

  friend class Serializable::SerializableDerivedInstantiator<WaypointTrajectoryRep>;
};


} // base

#endif
