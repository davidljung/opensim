/****************************************************************************
  Copyright (C)2003 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  $Id: Environment 1109 2004-09-27 22:02:13Z jungd $

****************************************************************************/

#ifndef _ROBOT_SIM_ENVIRONMENT_
#define _ROBOT_SIM_ENVIRONMENT_

#include <robot/sim/sim>

#include <base/ReferencedObject>
#include <base/Externalizable>
#include <base/Named>
#include <base/Simulatable>

#include <base/Orient>
#include <base/VFileSystem>
#include <base/Cache>

#include <robot/Robot>
#include <robot/ToolDescription>



namespace robot {
namespace sim {

/**
 * An abstract environment that can contain Robots
 */
class Environment : public base::Simulatable, public base::Externalizable, public base::Cloneable
{
public:
  Environment(ref<base::VFileSystem> fs, ref<base::Cache> cache, const String& name = "") {}
  Environment(const Environment& e) {}

  virtual String className() const { return String("Environment"); }

  // factory
  virtual ref<RobotDescription> newRobotDescription() const = 0;
  virtual ref<ToolDescription> newToolDescription() const = 0;


  // methods to add/remove robots
  /// add Robot with the given description to the environment at the specified position/orientation (fixed there if anchored is true)
  virtual ref<Robot> addRobot(ref<const robot::RobotDescription> robotDescription,
                              const base::Point3& position,
                              const base::Orient& orientation,
                              bool anchored = false) = 0;

  virtual void removeRobot(ref<robot::Robot> robot) = 0;

  virtual Int numRobots() const = 0;
  virtual ref<Robot> getRobot(Int i) = 0;
  virtual ref<Robot> getRobot(String name) = 0;

};


}
} // robot::sim

#endif
