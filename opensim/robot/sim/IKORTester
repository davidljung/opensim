/* **-*-c++-*-**************************************************************
  Copyright (C)2003 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: IKORTester 1033 2004-02-11 20:47:52Z jungd $
  $Revision: 1.5 $
  $Date: 2004-02-11 15:47:52 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _ROBOT_SIM_IKORTESTER_
#define _ROBOT_SIM_IKORTESTER_

#include <robot/sim/sim>

#include <base/ReferencedObject>
#include <base/PathName>
#include <base/Matrix>
#include <base/Named>
#include <base/Time>
#include <robot/sim/IKORTest>


namespace robot {
namespace sim {


/// Runs tests based on their specification via IKORTest
class IKORTester :  public base::Named, public base::ReferencedObject
{
public:
  IKORTester(ref<base::VFileSystem> fs, ref<base::Cache> cache);

  virtual String className() const { return String("IKORTester"); }

  void executeTests(ref<IKORTest> itest, 
                    bool saveResults=false, base::PathName alternateOutputFileName = base::PathName());

protected:
  base::Time executeTest(IKORTest::Test& test, base::Time simTime, ref<SimulatedBasicEnvironment> env, 
                         ref<SimulatedRobot> robot, Int testManipulatorIndex);

  base::Vector calcEEVector(const IKORTest::Test& test, const KinematicChain& chain, const base::Vector& q) const;

  ref<base::VFileSystem> filesystem;
  ref<base::Cache> cache;
};


} // namespace sim
} // namespace robot

#endif
