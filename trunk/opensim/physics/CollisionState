/* **-*-c++-*-**************************************************************
  Copyright (C)1996 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: CollisionState 1031 2004-02-11 20:46:36Z jungd $
  $Revision: 1.4 $
  $Date: 2004-02-11 15:46:36 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _PHYSICS_COLLISIONSTATE_
#define _PHYSICS_COLLISIONSTATE_

#include <physics/physics>
#include <physics/Collidable>
#include <base/ReferencedObject>
#include <base/Point3>
#include <vector>


namespace physics {

class Solid;

class CollisionState : public base::ReferencedObject
{
public:
  CollisionState(ref<const Collidable> collidable1, ref<const Collidable> collidable2)
    : collidable1(collidable1), collidable2(collidable2) {}
  CollisionState(const CollisionState& cs)
    : collidable1(cs.collidable1), collidable2(cs.collidable2), contacts(cs.contacts) {}
  virtual ~CollisionState() {}

  virtual String className() const { return String("CollisionState"); }
  virtual base::Object& clone() const { return *NewNamedObj(className()) CollisionState(*this); }

  // The Collidables who's collision state this represents
  ref<const Collidable> collidable1;
  ref<const Collidable> collidable2;

  class Contact {
  public:
    Contact(const Point3& p1, const Point3& p2, const Vector3& n1, Real depth=0)
      : p1(p1), p2(p2), n1(n1), depth(depth) {}
    Point3  p1,p2;  ///< contact point in local coord. frame of the Solids/CollisionModels
    Vector3 n1;     ///< surface normal of contact on solid1 (n2=-n1)
    Real depth;     ///< penetration depth
  };


  // Contacts (if in contact state)
  //  (NB: This may contain 0, 1 or more contacts depending on the last queryType to
  //   the CollisionDetector)
  typedef std::vector<Contact> Contacts;
  Contacts contacts;
};


} // physics

#endif
