/* **-*-c++-*-**************************************************************
  Copyright (C)1996 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  $Id: Torus 1144 2004-09-28 21:03:37Z jungd $
  $Revision: 1.4 $
  $Date: 2004-09-28 17:03:37 -0400 (Tue, 28 Sep 2004) $
  $Author: jungd $

****************************************************************************/

#ifndef _PHYSICS_TORUS_
#define _PHYSICS_TORUS_

#include <base/base>
#include <physics/ComplexShape>
#include <base/Dimension3>




namespace physics {


class Torus : virtual public ComplexShape
{
public:
  explicit Torus(Real innerRadius=0.5, Real outerRadius=1.0);
  Torus(const Torus& t);
  virtual ~Torus();

  virtual String className() const { return String("Torus"); }

  Real innerRadius() const { return _innerRadius; }
  Real outerRadius() const { return _outerRadius; }

  // Shape
  virtual base::Object& clone() const { return *NewNamedObj(className()) Torus(*this); }
  virtual BoundingBox getBoundingBox() const
    {
      Real minor = (_outerRadius-_innerRadius)/2.0;
      return BoundingBox(-gfx::Point3(_outerRadius,minor,_outerRadius),gfx::Point3(_outerRadius,minor,_outerRadius));
    }
  virtual BoundingSphere getBoundingSphere() const { return BoundingSphere(gfx::Point3(),_outerRadius); }

  virtual const MassProperties& getMassProperties(ref<const Material> material) const;

  virtual gfx::Segment3 shortestSegmentBetween(const base::Transform& t, const Point3& p) const;
  virtual gfx::Segment3 shortestSegmentBetween(const base::Transform& t, const gfx::Segment3& s) const;
  virtual gfx::Segment3 shortestSegmentBetween(const base::Transform& t, const gfx::Triangle3& tri) const;
  virtual gfx::Segment3 shortestSegmentBetween(const base::Transform& t, const gfx::Quad3& q) const;
  virtual gfx::Segment3 shortestSegmentBetween(const base::Transform& t1, ref<const Shape> s, const base::Transform& t2) const;

  // CollisionModelProvider
  virtual ref<CollisionModel> getCollisionModel(CollisionModel::CollisionModelType modelType) const;

  // Visual
  virtual bool visualTypeSupported(VisualType type) const { return (type==OSGVisual); }
  virtual osg::Node* createOSGVisual(Attributes visualAttributes=0) const;

  virtual void serialize(base::Serializer& s);

protected:
  osg::Node* createOSGTorus(Visual::Attributes visualAttributes, Int sides, Int rings) const;


private:
  Real _innerRadius;
  Real _outerRadius;

  mutable bool massPropertiesCached;
  mutable Real density;
  mutable MassProperties massProperties;

  mutable ref<CollisionModel> collisionModel;
  mutable CollisionModel::CollisionModelType modelType;
};


} // physics

#endif
