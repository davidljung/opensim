/* **-*-c++-*-**************************************************************
  Copyright (C)2003 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: ODESolidConnectedCollidableBody 1031 2004-02-11 20:46:36Z jungd $
  $Revision: 1.1 $
  $Date: 2004-02-11 15:46:36 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _PHYSICS_ODESOLIDCONNECTEDCOLLIDABLEBODY_
#define _PHYSICS_ODESOLIDCONNECTEDCOLLIDABLEBODY_

#include <physics/physics>

#include <physics/SolidConnectedCollidableBody>
#include <physics/ODECollidableBody>

#include <ode/ode.h>


namespace physics {

  
class ODESolidConnectedCollidableBody : public SolidConnectedCollidableBody, public ODECollidableBody
{
public:
  ODESolidConnectedCollidableBody(ref<Solid> solid, ref<const Shape> shape);
  virtual ~ODESolidConnectedCollidableBody();
  
  virtual String className() const { return String("ODESolidConnectedCollidableBody"); }

  virtual void setPosition(const Point3& x) { SolidConnectedCollidableBody::setPosition(x); }
  virtual void setOrientation(const Orient& orient) { SolidConnectedCollidableBody::setOrientation(orient); }
  virtual void setVelocity(const Vector3& v) { SolidConnectedCollidableBody::setVelocity(v); }
  virtual void setAngVelocity(const Vector3& w) { SolidConnectedCollidableBody::setAngVelocity(w); }

  virtual Point3  getPosition() const { return SolidConnectedCollidableBody::getPosition(); }
  virtual Orient  getOrientation() const { return SolidConnectedCollidableBody::getOrientation(); }
  virtual Vector3 getVelocity() const { return SolidConnectedCollidableBody::getVelocity(); }
  virtual Vector3 getAngVelocity() const { return SolidConnectedCollidableBody::getAngVelocity(); }
  
  virtual void saveState() { SolidConnectedCollidableBody::saveState(); }
  virtual void restoreState() { SolidConnectedCollidableBody::restoreState(); }

  virtual Point3  getSavedPosition() const { return SolidConnectedCollidableBody::getSavedPosition(); }
  virtual Orient  getSavedOrientation() const { return SolidConnectedCollidableBody::getSavedOrientation(); }
  virtual Vector3 getSavedVelocity() const { return SolidConnectedCollidableBody::getSavedVelocity(); }
  virtual Vector3 getSavedAngVelocity() const { return SolidConnectedCollidableBody::getSavedAngVelocity(); }

protected:
  ODESolidConnectedCollidableBody() {}
  ODESolidConnectedCollidableBody(const ODESolidConnectedCollidableBody& cb) 
    : SolidConnectedCollidableBody(cb), ODECollidableBody(cb) {}

};
  
  

} // physics

#endif
