/* **-*-c++-*-**************************************************************
  Copyright (C)1996 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: DynamicSpatial 1031 2004-02-11 20:46:36Z jungd $
  $Revision: 1.1 $
  $Date: 2004-02-11 15:46:36 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _PHYSICS_DYNAMICSPATIAL_
#define _PHYSICS_DYNAMICSPATIAL_

#include <physics/physics>

#include <physics/Spatial>


namespace physics {


class DynamicSpatial : public Spatial
{
public:
  DynamicSpatial() {}
  DynamicSpatial(const DynamicSpatial& b) : Spatial(b) { *this = b; }

  virtual ~DynamicSpatial() {}

  virtual String className() const { return String("DynamicSpatial"); }

  virtual DynamicSpatial& operator=(const DynamicSpatial& b) 
  {
    setPosition(b.getSavedPosition());
    setOrientation(b.getSavedOrientation());
    setVelocity(b.getSavedVelocity());
    setAngVelocity(b.getSavedAngVelocity());
    saveState();
    Spatial::operator=(b); 
    setVelocity(b.getVelocity());
    setAngVelocity(b.getAngVelocity());
    return *this;
  }
  

  // Spatial
  virtual void setPosition(const Point3& x) = 0;
  virtual void setOrientation(const Orient& orient) = 0;
  virtual Point3  getPosition() const = 0;
  virtual Orient  getOrientation() const = 0;


  virtual void setVelocity(const Vector3& v) = 0;
  virtual void setAngVelocity(const Vector3& w) = 0;
  virtual Vector3 getVelocity() const = 0;
  virtual Vector3 getAngVelocity() const = 0;

  virtual void saveState() = 0;
  virtual void restoreState() = 0;

  virtual Point3  getSavedPosition() const = 0;
  virtual Orient  getSavedOrientation() const = 0;
  virtual Vector3 getSavedVelocity() const = 0;
  virtual Vector3 getSavedAngVelocity() const = 0;
  
  // Utility
  virtual Point3  getRelPointPos(const Point3& p)
  {
    return getConfiguration().transform(p);
  }
  
  virtual Vector3 getRelPointVel(const Point3& p)
  {
    Unimplemented;
  }
  
  virtual Point3  getGlobalPointRelPos(const Point3& p)
  {
    return inverse(getConfiguration()).transform(p);
  }

};
  
  
inline std::ostream& operator<<(std::ostream& out, const DynamicSpatial& b) // Output
{
  return out << "(x:" << b.getPosition() << ",q:" << b.getOrientation() 
	     << ",v:" << b.getVelocity() << ",w:" << b.getAngVelocity() << ")"; 
}
  

} // physics

#endif
