/****************************************************************************
  Copyright (C)1996 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: SOLIDCollisionModel 1031 2004-02-11 20:46:36Z jungd $
  $Revision: 1.2 $
  $Date: 2004-02-11 15:46:36 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _PHYSICS_SOLIDCOLLISIONMODEL_
#define _PHYSICS_SOLIDCOLLISIONMODEL_

#include <physics/physics>
#include <physics/CollisionModel>
#include <physics/Shape>

//#include <base/array>
#include <gfx/TriangleContainer>

#include <SOLID/solid.h>


namespace physics {


class SOLIDCollisionModel : public CollisionModel
{
public:
  SOLIDCollisionModel(const SOLIDCollisionModel& cm);
  SOLIDCollisionModel(const gfx::TriangleContainer& triangles);
  SOLIDCollisionModel(ref<const Shape> shape);
  virtual ~SOLIDCollisionModel();

  virtual String className() const { return String("SOLIDCollisionModel"); }
  virtual Object& clone() const { return *NewNamedObj(className()) SOLIDCollisionModel(*this); }

  virtual CollisionModelType getType() const { return SOLIDModel; }

  // OSGVisual
  virtual bool visualTypeSupported(VisualType type) const { return (type==OSGVisual); }
  virtual osg::Node* createOSGVisual(Visual::Attributes visualAttributes=0) const;

  DtShapeRef getSOLIDShapeRef() const { return shapeRef; }

protected:
  void buildModel(const gfx::TriangleContainer& triangles);
  void buildModel(ref<const Shape> shape);

  DtShapeRef shapeRef; // SOLID library handle
  bool shapeRefOwner;
  
  friend class SOLIDCollisionDetector;
};


} // physics

#endif
