/* **-*-c++-*-**************************************************************
  Copyright (C)1996 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: CollisionDetector 1031 2004-02-11 20:46:36Z jungd $
  $Revision: 1.6 $
  $Date: 2004-02-11 15:46:36 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _PHYSICS_COLLISIONDETECTOR_
#define _PHYSICS_COLLISIONDETECTOR_

#include <physics/physics>

#include <gfx/Segment3>
#include <physics/Collider>
#include <physics/CollidableBody>
#include <physics/CollisionState>


namespace physics {


class CollisionDetector : public Collider
{
public:
  CollisionDetector();
  virtual ~CollisionDetector();

  enum CollisionQueryType { DetectCollision, FirstContactPoint, AllContactPoints };

  virtual void setCollisionQueryType(CollisionQueryType collisionQueryType) { queryType = collisionQueryType; }
  
  static const Real collisionEpsilon;

  virtual ref<CollidableBody> createCollidableBody(ref<Shape> shape) = 0; ///< new CollidableBody with specified Shape

  /// Get the CollisionState for a pair of CollidableBodys.
  virtual ref<CollisionState> getCollisionState(ref<const CollidableBody> collidableBody1, ref<const CollidableBody> collidableBody2) const;

  /// Compute the shortest line segment between the surfaces of a pair of Collidables
  virtual gfx::Segment3 shortestSegmentBetween(ref<const Collidable> collidable1, ref<const Collidable> collidable2);
  
protected:
  virtual ref<CollisionState> newCollisionState(ref<const CollidableBody> collidableBody1, ref<const CollidableBody> collidableBody2) const
    { return ref<CollisionState>(NewNamedObj("CollisionState") CollisionState(collidableBody1,collidableBody2)); }

  // if key pair<ref<Collidable>,ref<Collidable> > is present, then ref<CollisionState> is the
  //  collision state for this pair of CollidableBodys
  typedef std::pair< ref<const CollidableBody>, ref<const CollidableBody> > CollidableBodyPair;
  typedef std::map< CollidableBodyPair, ref<CollisionState> > CollisionStateMap;
  mutable CollisionStateMap collisionStates;

  CollisionQueryType queryType;
};


} // physics

#endif
