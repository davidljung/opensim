/****************************************************************************
  Copyright (C)2002 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: PathRep 1029 2004-02-11 20:45:54Z jungd $
  $Revision: 1.3 $
  $Date: 2004-02-11 15:45:54 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _BASE_PATHREP_
#define _BASE_PATHREP_

#include <base/base>

#include <base/ReferencedObject>
#include <base/Point3>
#include <base/Orient>
#include <base/Math>
#include <base/Serializable>
#include <base/Cloneable>


namespace base {


/**
 *  Abstract interface for concrete path representations used by class Path.
 *  (users should use class Path directly; implementors of new representations
 *   should implement this interface and add appropriate support in Path)
 */
class PathRep : public ReferencedObject, virtual public Serializable, virtual public Cloneable
{
public:

  /// get cartesian position at s:[0..1]
  virtual Point3 position(Real s) const = 0;

  /// get orientation at s:[0..1]
  virtual Orient orientation(Real s) const = 0;

  /// some values of s may correspond to distinguished points along a path.
  ///  the values s=0 and s=1 are always distinguished values. For example,
  ///  if the path was specified using waypoints, then there will be a
  ///  distinguished value of s for each waypoint.  0 <= i < numDistinguishedValues()
  virtual Real distinguishedValue(Int i) const
  { Math::bound<Int>(i,0,1); return (i==0)?0.0:1.0; }

  /// number of distinguished s values
  virtual Int numDistinguishedValues() const { return 2; }

  /// translate the path position by t
  virtual void translate(const Vector3& t) = 0;

  /// rotate the path orientation by r
  virtual void rotate(const Quat4& r) = 0;

  /// transform the path by m
  virtual void transform(const Matrix4& m) = 0;

  /// scale position coords. by s
  virtual void scalePosition(Real s) = 0;
  
};


} // base

#endif
