/****************************************************************************
  Copyright (C)1996 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
	
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: Cache 1029 2004-02-11 20:45:54Z jungd $
  $Revision: 1.3 $
  $Date: 2004-02-11 15:45:54 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _BASE_CACHE_
#define _BASE_CACHE_

#include <base/base>
#include <base/ResourceCache>

#include <map>

namespace base {

class Cache : public ResourceCache
{
public:
  Cache(ref<VFileSystem> fs, const PathName& resourceDirectory, const PathName& cacheDirectory);
  virtual ~Cache();

  virtual String className() const { return String("Cache"); }
  virtual base::Object& clone() const { return *NewNamedObj(className()) Cache(*this); }

  virtual ref<VFile>      getFile(const PathName& name)  throw (path_not_found, io_error); ///< obtain a file (relative paths are w.r.t. the current directory)
  /// obtain a file (looks in the resource tree, current directory & the optional path provided)
  virtual ref<VFile>      findFile(const PathName& name, const PathName& additionalPath=PathName()) throw (path_not_found, io_error);
  virtual bool            isCached(const PathName& name) throw (path_not_found, io_error); ///< is there a resource cache directory associated with this file
  virtual ref<VDirectory> getCache(const PathName& name) throw (path_not_found, io_error); ///< obtain resource cache directory associated with a file (possibly empty)
protected:

private:
  Cache(const Cache& c) : ResourceCache(c) {}

};


} // base

#endif
