/* **-*-c++-*-**************************************************************
  Copyright (C)2002 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
	
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
	
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  $Id: Controller 1039 2004-02-11 20:50:52Z jungd $
  $Revision: 1.6 $
  $Date: 2004-02-11 15:50:52 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _ROBOT_CONTROLLER_
#define _ROBOT_CONTROLLER_

#include <robot/robot>

#include <base/Time>
#include <robot/ControlInterface>


namespace robot {

/**
 * Base class of things that can control Controllables
 *  (via the ControlInterfaces they provide)
 * e.g. a high-level Controller
 */
class Controller : virtual public base::ReferencedObject
{
public:

  /** Provide ControlInterface through which Controller may control. 
      Can be called multiple times to pass multiple ControlInterfaces. 
      Unknown ControlInterface types will be ignored. */
  virtual void setControlInterface(ref<ControlInterface> controlInterface) = 0;


  /** Query if the Controller has been passed all the ControlInterfaces it
   *  needs via setControlInterface() 
   */
  virtual bool isConnected() const { return false; }


  /** Execute an iteration of the control loop.
   *   returns true if it wants to quit the loop - however this may
   *   be ignored by the user/caller.
   */
  virtual bool iterate(const base::Time& time) = 0; 
};


} // robot

#endif
