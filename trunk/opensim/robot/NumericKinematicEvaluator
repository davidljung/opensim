/* **-*-c++-*-**************************************************************
  Copyright (C)2003 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  $Id: NumericKinematicEvaluator 1119 2004-09-27 22:14:54Z jungd $

****************************************************************************/

#ifndef _ROBOT_NUMERICKINEMATICEVALUATOR_
#define _ROBOT_NUMERICKINEMATICEVALUATOR_

#include <robot/robot>

#include <robot/KinematicEvaluator>
#include <robot/KinematicChain>


namespace robot {


/**
 * A KinematicEvaluator that uses vector cross products to
 * evaluate the Jacobian and forward kinematics matrices numerically
 */
class NumericKinematicEvaluator : public KinematicEvaluator
{
public:
  NumericKinematicEvaluator();

  virtual String className() const { return String("NumericKinematicEvaluator"); }
  virtual Object& clone() const { return *NewObj NumericKinematicEvaluator(*this); }


  // KinematicEvaluator interface
  virtual Matrix getForwardKinematics(const KinematicChain& chain, const Vector& q) const;
  virtual Matrix getJacobian(const KinematicChain& chain, const Vector& q, bool includeOrientation = true) const;
  virtual array<base::Vector> getJointOrigins(const KinematicChain& chain, const base::Vector& q ) const;
  virtual array<base::Vector> getLinkOrigins(const KinematicChain& chain, const base::Vector& q ) const;


protected:
  NumericKinematicEvaluator(const NumericKinematicEvaluator& nke) {} ///< copy constructor

  void getLinksForwardKinematics(const KinematicChain& chain, const Vector& q, array<Matrix>& T) const;


};

} // namespace robot

#endif
