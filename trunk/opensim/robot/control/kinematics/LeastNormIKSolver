/* **-*-c++-*-**************************************************************
  Copyright (C)2002 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

  $Id: LeastNormIKSolver 1123 2004-09-28 20:42:51Z jungd $
  $Revision: 1.6 $
  $Date: 2004-09-28 16:42:51 -0400 (Tue, 28 Sep 2004) $
  $Author: jungd $

****************************************************************************/

#ifndef _ROBOT_CONTROL_KINEMATICS_LEASTNORMIKSOLVER_
#define _ROBOT_CONTROL_KINEMATICS_LEASTNORMIKSOLVER_

#include <robot/control/kinematics/kinematics>

#include <robot/control/kinematics/InverseKinematicsSolver>
#include <robot/control/kinematics/MPPseudoInvSolver>


namespace robot {
namespace control {
namespace kinematics {

/// Inverse kinematics solver using the Moore-Penrose Pseudo Inverse.
/**
 *  Equivelent to a least norm solution without any
 *   constraints.
 */
class LeastNormIKSolver : public InverseKinematicsSolver
{
public:
  LeastNormIKSolver();

  virtual String className() const { return String("LeastNormIKSolver"); }

  /// Solve inverse kinematics
  ///  NB: optMethod & optConstraints are ignored. The solver only provides a single solution, hence
  ///     no optimization is necessary.
  virtual Vector solve(const Vector& dx, Real dt, const Vector& x, const Vector& q,
                       const base::Matrix& J,
                       OptimizationMethod      optMethod      = PseudoInv,
                       OptimizationCriterion   optCriterion   = LeastNorm,
                       OptimizationConstraints optConstraints = OptimizationConstraints(DefaultConstraints));

protected:
  ref<MPPseudoInvSolver> solver;
};


} // namespace kinematics
} // namespace control
} // namespace robot

#endif
