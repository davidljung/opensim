/* **-*-c++-*-**************************************************************
  Copyright (C)2002 David Jung <opensim@pobox.com>

  This program/file is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details. (http://www.gnu.org)
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  
  $Id: Optimizer 1036 2004-02-11 20:48:55Z jungd $
  $Revision: 1.4 $
  $Date: 2004-02-11 15:48:55 -0500 (Wed, 11 Feb 2004) $
  $Author: jungd $
 
****************************************************************************/

#ifndef _ROBOT_CONTROL_KINEMATICS_OPTIMIZER_
#define _ROBOT_CONTROL_KINEMATICS_OPTIMIZER_

#include <robot/control/kinematics/kinematics>

#include <base/ReferencedObject>


namespace robot {
namespace control {
namespace kinematics {


/// Abstract interface to constrained optimizers
/**
 */
class Optimizer : public base::ReferencedObject
{
public:
  
  class Objective : public base::ReferencedObject
  {
  public:
    enum ObjectiveType { Linear, NonLinear };

    virtual ObjectiveType getObjectiveType() const = 0;

    Real Q(const Vector& x, const Vector& a) { return evaluate(x,a); }

    virtual Real evaluate(const Vector& x, const Vector& a) const = 0;
  };


  class Constraints : public base::ReferencedObject
  {
  public:
    enum ConstraintsType { Linear, NonLinear };
    enum ConstraintType  { Equality, Inequality };

    virtual ConstraintsType getConstraintsType() const = 0;
    virtual ConstraintType  getConstraintType(Int constraint) const = 0;
    virtual Int numConstraints() const = 0;
    virtual Int numEqualityConstraints() const = 0;
    virtual Int numInequalityConstraints() const = 0;
    Int size() const { return numConstraints(); }

    virtual Real   evaluate(Int constraint, const Vector& x, const Vector& a) const = 0;
    virtual Vector evaluate(const Vector& x, const Vector& a) const = 0;

    Real   g(Int i, const Vector& x, const Vector& a) const { return evaluate(i,x,a); }
    Vector g(const Vector& x, const Vector& a) const { return evaluate(x,a); }
    
    virtual String toString() const ///< to aid debugging (called by operator<<)
    { return String(); } 

  };


  virtual Vector optimize(ref<const Objective> objective, ref<const Constraints> constraints) const = 0;


};

inline std::ostream& operator<<(std::ostream& out, const Optimizer::Constraints& cs)
{ out << cs.toString(); return out; }



} // namespace kinematics
} // namespace control
} // namespace robot

#endif
